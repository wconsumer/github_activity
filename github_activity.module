<?php
use Drupal\wconsumer\Wconsumer;
use Drupal\wconsumer\Service\Exception;
use Drupal\wconsumer\Authentication\Credentials;
use Drupal\wconsumer\Service\Base;

function github_activity_menu() {
    $items['github_activity'] = array(
      'page callback' => 'github_activity_view',
      'type' => MENU_CALLBACK,
	  'access arguments' => TRUE
    );
    return $items;
  }
function github_activity_view() {
	
}

/**
* Implements hook_block_info().
*/
function github_activity_block_info() {
  $blocks = array();

  $blocks['github_activity'] = array(
    'info' => t('GitHub Activity'),
  );

  return $blocks;
}

function github_activity_block_view($block_name = '') {
  if ($block_name != 'github_activity') {
    return null;
  }

  // $block = function($contents) {
    // return array(
      // 'subject' => 'GitHub Activity',
      // 'content' => array(
        // '#markup' => $contents,
      // ),
    // );
  // };
  
  global $user;
  if (empty($user->uid) || !Wconsumer::$github->isActive()) {
    return NULL;
  }
  $html = "<table>";
  $html .= "	<tr>";
  $html .= "		<th>Project</th>";
  $html .= "		<th>Name</th>";
  $html .= "		<th>Email</th>";
  $html .= "		<th>Message</th>";
  $html .= "</tr>";
  if ($user->uid) {
		$scopes = wconsumer_github_connect_wconsumer_define_required_scopes(Wconsumer::$github);
		$api = Wconsumer::$github->api($user->uid, $scopes);
		$info = $api->get('user')->send()->json();
		$email = $api->get('/user/emails')->send()->json();
		//get infor and save table info_github_activity
		$email = @$emails[0];
		$info = @$info;
	  	$user_id = $user->uid;
		$data = array(
					"uid"=> (int)$user_id,
					"login"=> $info['login'],
					"avatar_url"=> $info['avatar_url'],
					"gravatar_id"=> $info['gravatar_id'],
					"url"=> $info['url'],
					"name"=> $info['name'],
					"company"=> $info['company'],
					"blog"=> $info['blog'],
					"location"=> $info['location'],
					"email"=> $email,
					"hireable"=> (int)$info['hireable'],
					"bio"=> $info['bio'],
					"public_repos"=> $info['public_repos'],
					"public_gists"=> $info['public_gists'],
					"followers"=> $info['followers'],
					"following"=> $info['following'],
					"html_url"=> $info['html_url'],
					"created_at"=> REQUEST_TIME,
					"type"=> $info['type']
		);
		$check_exist = db_select('infor_user_github', 'icg')
					->fields('icg', array('uid'))
					->condition('uid', $user_id, '=')
					->execute()
					->fetchAssoc();
		if($check_exist) {
			$login = "";
			$avatar_url = "";
			$name = "";
			$url = "";
			$blog = "";
			$company = "";
			$location = "";
			$bio = "";
			$html_url = "";
			if ($info['login'] != $check_exist['login']) {
				$login = $info['login'];
			}
			if ($info['avatar_url'] != $check_exist['avatar_url']) {
				$avatar_url = $info['avatar_url'];
			}
			if ($info['name'] != $check_exist['name']) {
				$name = $info['name'];
			}
			if ($info['url'] != $check_exist['url']) {
				$url = $info['url'];
			}
			if ($info['blog'] != $check_exist['blog']) {
				$blog = $info['blog'];
			}
			if ($info['company'] != $check_exist['company']) {
				$company = $info['company'];
			}
			if ($info['location'] != $check_exist['location']) {
				$location = $info['location'];
			}
			if ($info['bio'] != $check_exist['bio']) {
				$bio = $info['bio'];
			}
			if ($info['html_url'] != $check_exist['html_url']) {
				$html_url = $info['html_url'];
			}
			db_update('infor_user_github')
						->fields(array(
						'login' => $login,
						'avatar_url' => $avatar_url,
						'url' => $url,
						'name' => $name,
						'blog' => $blog,
						'company' => $company,
						'location' => $location,
						'bio' => $bio,
						'html_url' => $html_url
						))
						->condition('uid', $user_id, '=')
						->execute();
		} else {
			$infor_user_github = db_insert('infor_user_github') // Table name no longer needs {}
			->fields($data)
			->execute();
		}
		//get activity of user github
		$activity = $api->get('users/'.$info['login'].'/events')->send()->json();
		// debug($activity);
		foreach ($activity as $key=>$value) {
			if ($value['type'] == 'PushEvent') {
				foreach ($value['payload']['commits'] as $row) {
					// if ($row['author']['name'] == $info['login']) {
						 $html .= "<tr>";
						 $html .= "	<td>".$value['repo']['name']."</td>";
						 $html .= "	<td>".$row['author']['name']."</td>";
						 $html .= "	<td>".$row['author']['email']."</td>";
						 $html .= "	<td>".$row['message']."</td>";
						 $html .= "</tr>";
					// }
				}
			}
		}
  }
  $block = array();
  $block['content'] = $html;
  return $block;
}
 
//create cron job
function github_activity_cron() {
	
}
//change layout and data list user
function github_activity_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_admin_account') {
		$form['accounts']['#header'] = array (
									'username' => 
									array (
									  'data' => 'Username',
									  'field' => 'u.name',
									),
									'avatar_url' => 
									array (
									  'data' => 'Avartar',
									),
									'url_github' => 
									array (
									  'data' => 'Url GitHub',
									),
									'status' => 
									array (
									  'data' => 'Status',
									  'field' => 'u.status',
									),
									'roles' => 
									array (
									  'data' => 'Roles',
									),
									'member_for' => 
									array (
									  'data' => 'Member for',
									  'field' => 'u.created',
									  'sort' => 'desc',
									),
									'access' => 
									array (
									  'data' => 'Last access',
									  'field' => 'u.access',
									),
									'operations' => 
									array (
									  'data' => 'Operations',
									));
		$list_user = array();				  
		foreach ($form['accounts']['#options'] as $key=>$row) {
			$info_github = db_select('infor_user_github', 'icg')
				->fields('icg')
				->condition('uid', $key, '=')
				->execute()
				->fetchAssoc();
			$list_user[$key] = array(
									'username'=>$row['username'],
									'avatar_url'=>'<img src="'.$info_github['avatar_url'].'" width="100px"/>',
									'url_github'=>$info_github['url'],
									'member_for'=>$row['member_for'],
									'status'=>$row['status'],
									'roles'=>$row['roles'],
									'access'=>$row['access'],
									'operations'=>$row['operations'],
									
									);
		}
		$form['accounts']['#options'] = $list_user;
	}
}