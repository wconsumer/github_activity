<?php
use Drupal\wconsumer\Wconsumer;
use Drupal\wconsumer\Service\Exception;
<<<<<<< HEAD
use Drupal\wconsumer\Authentication\Credentials;
use Drupal\wconsumer\Service\Base;

function github_activity_menu() {
  $items['activity/user'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_activity_user',
    'access callback' => TRUE,
  );
  $items['oauth/github'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_oauth_github_activity',
    'access callback' => TRUE,
  );
  
  $items['activity/show'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => '_show_statictis_activity',
    'access callback' => TRUE,
  );
  return $items;
}
function github_activity_form($form, &$form_state) {
 $form = array (
  '#action' => $GLOBAL['base_url'].'/oauth/github', //The action attribute of the HTML form tag
  'submit' => array ( //We define a simple submit button
   '#type' => 'submit',
   '#value' => t('Authenticate Github'),
   '#name' => t('github'),
  ),
 );

 return $form;
}
function wconsumer_activity_auth($service_name) {
  $service = Wconsumer::instance()->services->get($service_name);
  if (!isset($service)) {
    drupal_set_message(t("{$service_name} service is not currently available"));
    drupal_goto('<front>');
  }

  if (!$service->isActive()) {
    drupal_set_message(t("'{$service->getName()}' service is not currently active"));
    drupal_goto('<front>');
  }

  // Persist the url which we want back to in session
  if (!empty($_GET['destination'])) {
    drupal_set_message($_GET['destination'], 'wconsumer_back_to_url');
  }
  unset($_GET['destination']);

  global $user;
  $scopes = array_filter(module_invoke_all('wconsumer_define_required_scopes', $service));
  $service->authentication->authenticate($user, $scopes);
}
function _oauth_github_activity() {
	global $user;

	$serviceName = 'github';
	/** @var \Drupal\wconsumer\Service\Base $service */
	$service = Wconsumer::instance()->services->{$serviceName};
	// Either authenticate them or log them out
	if ($service->checkAuthentication('user', $user->uid)) {
		$service->authentication->logout($user);
		drupal_set_message(t('Your '.$serviceName.' service has been revoked.'));
	}
	else {
		wconsumer_activity_auth($serviceName);
	}
}
function _activity_user() {
	global $user;
	$credentials = Wconsumer::$github->getCredentials($user->uid);
	if ($user->uid == 1) {
		$html = "<table>";
		$html .= "	<tr>";
		$html .= "		<th>Project</th>";
		$html .= "		<th>Name</th>";
		$html .= "		<th>Email</th>";
		$html .= "		<th>Message</th>";
		$html .= "		<th>Created</th>";
		$html .= "</tr>";
		$list_user = db_select('infor_user_github', 'iug')
					->fields('iug', array('uid','login'))
					->execute();
		while ($row_user = $list_user->fetchAssoc()) {
			$scopes = wconsumer_github_connect_wconsumer_define_required_scopes(Wconsumer::$github);
			$api = Wconsumer::$github->api($row_user['uid'], $scopes);
			//get activity of user github
			$activity = $api->get('users/'.$row_user['login'].'/events')->send()->json();
			foreach ($activity as $key=>$value) {
				if ($value['type'] == 'PushEvent') {
					foreach ($value['payload']['commits'] as $row) {
						$get_created_commit = $api->get('repos/'.$value['repo']['name'].'/commits/'.$row['sha'])->send()->json();
						$date = $get_created_commit['commit']['committer']['date'];
						// if ($row['author']['name'] == $info['login']) {
							 $html .= "<tr>";
							 $html .= "	<td>".$value['repo']['name']."</td>";
							 $html .= "	<td>".$row['author']['name']."</td>";
							 $html .= "	<td>".$row['author']['email']."</td>";
							 $html .= "	<td>".$row['message']."</td>";
							 $html .= "	<td>".$date."</td>";
							 $html .= "</tr>";
						// }
					}
				}
			}
		}
		$html .= "</table>";
	} else if ($user->uid != 0) {
		if (!$credentials) {
		  $html = "User not yet authorized access to his GitHub service profile. Click button:";
		  $html .= render(drupal_get_form('github_activity_form'));
		} else {
			$html = "<table>";
			$html .= "	<tr>";
			$html .= "		<th>Project</th>";
			$html .= "		<th>Name</th>";
			$html .= "		<th>Email</th>";
			$html .= "		<th>Message</th>";
			$html .= "		<th>Created</th>";
			$html .= "</tr>";
			$scopes = wconsumer_github_connect_wconsumer_define_required_scopes(Wconsumer::$github);
			$api = Wconsumer::$github->api($user->uid, $scopes);
			$info = $api->get('user')->send()->json();
			$email = $api->get('/user/emails')->send()->json();
			//get infor and save table info_github_activity
			$email = @$emails[0];
			$info = @$info;
			$user_id = $user->uid;
			$data = array(
						"uid"=> (int)$user_id,
						"login"=> $info['login'],
						"avatar_url"=> $info['avatar_url'],
						"gravatar_id"=> $info['gravatar_id'],
						"url"=> $info['url'],
						"name"=> $info['name'],
						"company"=> $info['company'],
						"blog"=> $info['blog'],
						"location"=> $info['location'],
						"email"=> $email,
						"hireable"=> (int)$info['hireable'],
						"bio"=> $info['bio'],
						"public_repos"=> $info['public_repos'],
						"public_gists"=> $info['public_gists'],
						"followers"=> $info['followers'],
						"following"=> $info['following'],
						"html_url"=> $info['html_url'],
						"created_at"=> REQUEST_TIME,
						"type"=> $info['type']
			);
			$check_exist = db_select('infor_user_github', 'icg')
						->fields('icg', array('uid'))
						->condition('uid', $user_id, '=')
						->execute()
						->fetchAssoc();
			if($check_exist) {
				$login = "";
				$avatar_url = "";
				$name = "";
				$url = "";
				$blog = "";
				$company = "";
				$location = "";
				$bio = "";
				$html_url = "";
				if ($info['login'] != $check_exist['login']) {
					$login = $info['login'];
				}
				if ($info['avatar_url'] != $check_exist['avatar_url']) {
					$avatar_url = $info['avatar_url'];
				}
				if ($info['name'] != $check_exist['name']) {
					$name = $info['name'];
				}
				if ($info['url'] != $check_exist['url']) {
					$url = $info['url'];
				}
				if ($info['blog'] != $check_exist['blog']) {
					$blog = $info['blog'];
				}
				if ($info['company'] != $check_exist['company']) {
					$company = $info['company'];
				}
				if ($info['location'] != $check_exist['location']) {
					$location = $info['location'];
				}
				if ($info['bio'] != $check_exist['bio']) {
					$bio = $info['bio'];
				}
				if ($info['html_url'] != $check_exist['html_url']) {
					$html_url = $info['html_url'];
				}
				db_update('infor_user_github')
							->fields(array(
							'login' => $login,
							'avatar_url' => $avatar_url,
							'url' => $url,
							'name' => $name,
							'blog' => $blog,
							'company' => $company,
							'location' => $location,
							'bio' => $bio,
							'html_url' => $html_url
							))
							->condition('uid', $user_id, '=')
							->execute();
			} else {
				$infor_user_github = db_insert('infor_user_github') // Table name no longer needs {}
				->fields($data)
				->execute();
			}
			//get activity of user github
			$activity = $api->get('users/'.$info['login'].'/events')->send()->json();
			foreach ($activity as $key=>$value) {
				if ($value['type'] == 'PushEvent') {
					foreach ($value['payload']['commits'] as $row) {
							// $get_created_commit = $api->get('repos/'.$value['repo']['name'].'/commits/'.$row['sha'])->send()->json();
							// $date = $get_created_commit['commit']['committer']['date'];
						// if ($row['author']['name'] == $info['login']) {
							 $html .= "<tr>";
							 $html .= "	<td>".$value['repo']['name']."</td>";
							 $html .= "	<td>".$row['author']['name']."</td>";
							 $html .= "	<td>".$row['author']['email']."</td>";
							 $html .= "	<td>".$row['message']."</td>";
							 $html .= "	<td>".$date."</td>";
							 $html .= "</tr>";
						// }
					}
				}
			}
		$html .= "</table>";
	  }
  }
  return $html;
}
 
//create cron job
function github_activity_cron() {
	
}
//change layout and data list user
function github_activity_form_alter(&$form, &$form_state, $form_id) {
	if ($form_id == 'user_admin_account') {
		$form['accounts']['#header'] = array (
									'username' => 
									array (
									  'data' => 'Username',
									  'field' => 'u.name',
									),
									'avatar_url' => 
									array (
									  'data' => 'Avartar',
									),
									'url_github' => 
									array (
									  'data' => 'Url GitHub',
									),
									'status' => 
									array (
									  'data' => 'Status',
									  'field' => 'u.status',
									),
									'roles' => 
									array (
									  'data' => 'Roles',
									),
									'member_for' => 
									array (
									  'data' => 'Member for',
									  'field' => 'u.created',
									  'sort' => 'desc',
									),
									'access' => 
									array (
									  'data' => 'Last access',
									  'field' => 'u.access',
									),
									'operations' => 
									array (
									  'data' => 'Operations',
									));
		$list_user = array();				  
		foreach ($form['accounts']['#options'] as $key=>$row) {
			$info_github = db_select('infor_user_github', 'icg')
				->fields('icg')
				->condition('uid', $key, '=')
				->execute()
				->fetchAssoc();
			$list_user[$key] = array(
									'username'=>$row['username'],
									'avatar_url'=>'<img src="'.$info_github['avatar_url'].'" width="100px"/>',
									'url_github'=>$info_github['url'],
									'member_for'=>$row['member_for'],
									'status'=>$row['status'],
									'roles'=>$row['roles'],
									'access'=>$row['access'],
									'operations'=>$row['operations'],
									
									);
		}
		$form['accounts']['#options'] = $list_user;
	}
}
function github_activity_block_info() {
  $blocks['list_repository'] = array(
    'info' => t('List Repository')
  );

  return $blocks;
}
function _show_statictis_activity() {
	$html = "";
	$type='day';
	if (isset($_GET['type'])) {
		$type=$_GET['type'];
	}
	drupal_add_css(drupal_get_path('module', 'github_activity') . '/style.css','theme');
	if (isset($_GET['list_repository'])) {
		$scopes = wconsumer_github_connect_wconsumer_define_required_scopes(Wconsumer::$github);
		$api = Wconsumer::$github->api($user->uid, $scopes);
		$list_repository = $api->get('/repos/'.$_GET['list_repository'].'/commits')->send()->json();
		$path = $GLOBALS['base_url'].'/activity/show?list_repository='.$_GET['list_repository'].'&type=';
		$html .= "<b>Activity</b>";
		$html .= "<ul class='activity_github'>";
		$html .= "	<li><a href='".$path.'day'."'>Day</a></li>";
		$html .= "	<li><a href='".$path.'week'."'>Week</a></li>";
		$html .= "	<li><a href='".$path.'month'."'>Month</a></li>";
		$html .= "	<div class='clear_both'></div>";
		$html .= "</ul>";
		
		$list_activity_day = array();
		$list_activity_week = array();
		$list_activity_month = array();
		
		foreach ($list_repository as $key=>$value) {
			$path_date = str_replace("https://api.github.com", "" ,$value['url']);
			$date_created = $api->get($path_date)->send()->json();
			$day = date('d', strtotime($date_created['commit']['committer']['date']));
			$week = date('W', strtotime($date_created['commit']['committer']['date']));
			$month = date('m', strtotime($date_created['commit']['committer']['date']));
			$year = date('y', strtotime($date_created['commit']['committer']['date']));
			$list_activity_day[] = $day;
			$list_activity_week[] = $week;
			$list_activity_month[] = $month;
			array_push($list_repository[$key], array('day'=>$day, 'week'=>$week, 'month'=>$month, 'year'=>$year));
		}
		if ($type == 'day') {
			$list_activity_day = array_unique($list_activity_day);
			//show list activity for day
			foreach ($list_activity_day as $day) {
				$flag = 0;
				foreach ($list_repository as $key=>$value) {
					if ($value[0]['day'] == $day) {
						if ($flag == 0) {
							$html .= "<b>Day: ".$day."/".$month."/".$year."</b>";
						}
						$html .= "<div class='show_activity'>";
						$html .= "	<div class='left_activity'>";
						$html .= "		<img src='".$value['committer']['avatar_url']."' width='50px'/>";
						$html .= "	</div>";
						$html .= "	<div class='right_activity'>";
						$html .= "		<p>author: ".$value['commit']['committer']['name']."</p>";
						$html .= "		<p>message: ".$value['commit']['message']."</p>";
						$html .= "	</div>";
						$html .= "	<div class='clear_both'></div>";
						$html .= "</div>";
						$flag = 1;
					}
				}
			}		
		}
		//show list activity for week
		if ($type == 'week') {
			$list_activity_week = array_unique($list_activity_week);
			foreach ($list_activity_week as $week) {
				$flag = 0;
				foreach ($list_repository as $key=>$value) {
					if ($value[0]['week'] == $week) {
						if ($flag == 0) {
							$html .= "<b>Week: ".$week."/".$year."</b>";
						}
						$html .= "<div class='show_activity'>";
						$html .= "	<div class='left_activity'>";
						$html .= "		<img src='".$value['committer']['avatar_url']."' width='50px'/>";
						$html .= "	</div>";
						$html .= "	<div class='right_activity'>";
						$html .= "		<p>author: ".$value['commit']['committer']['name']."</p>";
						$html .= "		<p>message: ".$value['commit']['message']."</p>";
						$html .= "	</div>";
						$html .= "	<div class='clear_both'></div>";
						$html .= "</div>";
						$flag = 1;
					}
				}
			}
		}
		//show list activity for month
		if ($type == 'month') {
			$list_activity_month = array_unique($list_activity_month);
			foreach ($list_activity_month as $month) {
				$flag = 0;
				foreach ($list_repository as $key=>$value) {
					if ($value[0]['month'] == $month) {
						if ($flag == 0) {
							$html .= "<b>Month: ".$month."/".$year."</b>";
						}
						$html .= "<div class='show_activity'>";
						$html .= "	<div class='left_activity'>";
						$html .= "		<img src='".$value['committer']['avatar_url']."' width='50px'/>";
						$html .= "	</div>";
						$html .= "	<div class='right_activity'>";
						$html .= "		<p>author: ".$value['commit']['committer']['name']."</p>";
						$html .= "		<p>message: ".$value['commit']['message']."</p>";
						$html .= "	</div>";
						$html .= "	<div class='clear_both'></div>";
						$html .= "</div>";
						$flag = 1;
					}
				}
			}
		}
	}
	return $html;
}
function github_activity_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'list_repository':
		$credentials = Wconsumer::$github->getCredentials($user->uid);
		global $user;
		if ($user->uid != 0) {
			if (!$credentials) {
			  $html = "User not yet authorized access to his GitHub service profile. Click button:";
			  $html .= render(drupal_get_form('github_activity_form'));
			} else {
				$block['subject'] = t('List Repository');
				$scopes = wconsumer_github_connect_wconsumer_define_required_scopes(Wconsumer::$github);
				$api = Wconsumer::$github->api($user->uid, $scopes);
				$list_repository = $api->get('/user/repos')->send()->json();
				$html = "<form id='get_activity_repository' action='".$GLOBALS['base_url']."/activity/show'>";
				$html .= "<select id='list_repository' name='list_repository'>";
				$html .= "<option value='0' selected>Select</option>";
				foreach($list_repository as $value) {
					$html .= "<option value='".$value['full_name']."'>".$value['name']."</option>";
				}
				$html .= "</select>";
				$html .= "<br/>";
				$html .= "<input type='submit' value='Submit' />";
				$html .= "</form>";
				$block['content'] = $html;
			}
		}
		break;
  }
  return $block;
}